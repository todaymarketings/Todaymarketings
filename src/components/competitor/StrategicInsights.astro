---
// StrategicInsights.astro
import { useState } from "react";

// Dummy insights data
const initialInsights = [
  {
    id: 1,
    title: "Market Gap Identified",
    description:
      "AI analysis shows potential opportunity in mid-market segment with 40% growth potential",
    type: "opportunity",
  },
  {
    id: 2,
    title: "Competitor Price Drop",
    description:
      "TechCorp Inc. reduced enterprise plan pricing by 15% last week",
    type: "threat",
  },
  {
    id: 3,
    title: "Feature Advantage",
    description:
      "Your AI capabilities outperform competitors by 23% in user satisfaction",
    type: "strength",
  },
  {
    id: 4,
    title: "Social Media Traction",
    description:
      "InnovateTech gaining 2x more engagement on new product launches",
    type: "weakness",
  },
];

// Dummy additional insights that will be added when generating a report
const additionalInsights = [
  {
    id: 5,
    title: "Customer Retention Opportunity",
    description: "Churn rate decreased by 8% in targeted segments last month",
    type: "opportunity",
  },
  {
    id: 6,
    title: "API Performance Issue",
    description: "Response times 12% slower than industry benchmark",
    type: "weakness",
  },
];

const getTypeIcon = (type) => {
  switch (type) {
    case "opportunity":
      return `<div class="rounded-full p-2 bg-green-100">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
              </div>`;
    case "threat":
      return `<div class="rounded-full p-2 bg-red-100">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[#D80032]" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
              </div>`;
    case "strength":
      return `<div class="rounded-full p-2 bg-blue-100">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clip-rule="evenodd" />
                </svg>
              </div>`;
    case "weakness":
      return `<div class="rounded-full p-2 bg-yellow-100">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-yellow-600" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M12 13a1 1 0 100 2h5a1 1 0 001-1V9a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586 3.707 5.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z" clip-rule="evenodd" />
                </svg>
              </div>`;
  }
};

const getTypeClass = (type) => {
  switch (type) {
    case "opportunity":
      return "text-green-600";
    case "threat":
      return "text-[#D80032]";
    case "strength":
      return "text-blue-600";
    case "weakness":
      return "text-yellow-600";
  }
};
---

<div class="strategic-insights">
  <div id="insights-container" class="space-y-4">
    {
      initialInsights.map((insight) => (
        <div class="flex items-start space-x-3" data-insight-id={insight.id}>
          <div set:html={getTypeIcon(insight.type)} />
          <div class="flex-1">
            <h3 class={`font-medium ${getTypeClass(insight.type)}`}>
              {insight.title}
            </h3>
            <p class="text-sm text-gray-600">{insight.description}</p>
          </div>
          <button
            class="dismiss-insight text-gray-400 hover:text-red-500"
            data-insight-id={insight.id}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                clip-rule="evenodd"
              />
            </svg>
          </button>
        </div>
      ))
    }
  </div>

  <div class="mt-6">
    <button
      id="generate-report-btn"
      class="bg-[#D80032] hover:bg-[#3D0C11] text-white font-medium py-2 px-4 rounded flex items-center justify-center w-full"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 mr-2"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
        <line x1="16" y1="2" x2="16" y2="6"></line>
        <line x1="8" y1="2" x2="8" y2="6"></line>
        <line x1="3" y1="10" x2="21" y2="10"></line>
      </svg>
      Generate Weekly Report
    </button>
  </div>

  <div id="report-container" class="mt-6 hidden">
    <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
      <h2 class="text-lg font-medium text-gray-800 mb-4">
        Weekly Strategic Insights Report
      </h2>
      <div id="report-content" class="space-y-4">
        <!-- Report content will be populated here -->
      </div>
      <div class="mt-4 text-right">
        <button
          id="download-report"
          class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-1.5 px-3 rounded text-sm flex items-center inline-flex"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-1"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
              clip-rule="evenodd"></path>
          </svg>
          Download PDF
        </button>
      </div>
    </div>
  </div>

  <div
    id="notification"
    class="fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded shadow-lg transform transition-opacity opacity-0 hidden"
  >
    Report generated successfully!
  </div>
</div>

<script>
  // Define the insight data
  const additionalInsights = [
    {
      id: 5,
      title: "Customer Retention Opportunity",
      description: "Churn rate decreased by 8% in targeted segments last month",
      type: "opportunity",
    },
    {
      id: 6,
      title: "API Performance Issue",
      description: "Response times 12% slower than industry benchmark",
      type: "weakness",
    },
  ];

  // Track which additional insights have been added
  let addedInsightIds = new Set();

  // Function to generate HTML for a single insight
  function generateInsightHTML(insight) {
    const typeIconMap = {
      opportunity: `<div class="rounded-full p-2 bg-green-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                      </div>`,
      threat: `<div class="rounded-full p-2 bg-red-100">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-[#D80032]" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                  </svg>
                </div>`,
      strength: `<div class="rounded-full p-2 bg-blue-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clip-rule="evenodd" />
                    </svg>
                  </div>`,
      weakness: `<div class="rounded-full p-2 bg-yellow-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-yellow-600" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M12 13a1 1 0 100 2h5a1 1 0 001-1V9a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586 3.707 5.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z" clip-rule="evenodd" />
                    </svg>
                  </div>`,
    };

    const typeClassMap = {
      opportunity: "text-green-600",
      threat: "text-[#D80032]",
      strength: "text-blue-600",
      weakness: "text-yellow-600",
    };

    return `
      <div class="flex items-start space-x-3" data-insight-id="${insight.id}">
        ${typeIconMap[insight.type]}
        <div class="flex-1">
          <h3 class="font-medium ${typeClassMap[insight.type]}">
            ${insight.title}
          </h3>
          <p class="text-sm text-gray-600">${insight.description}</p>
        </div>
        <button 
          class="dismiss-insight text-gray-400 hover:text-red-500"
          data-insight-id="${insight.id}"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    `;
  }

  // Function to generate report content HTML
  function generateReportHTML() {
    const insightsContainer = document.getElementById("insights-container");
    const insights = insightsContainer.querySelectorAll("[data-insight-id]");

    let reportHTML = "";

    // Add current date
    const date = new Date();
    const formattedDate = date.toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    reportHTML += `<div class="mb-4">
      <p class="text-sm text-gray-500">Generated on ${formattedDate}</p>
    </div>`;

    // Categorize insights
    const categories = {
      opportunity: {
        title: "Opportunities",
        items: [],
      },
      threat: {
        title: "Threats",
        items: [],
      },
      strength: {
        title: "Strengths",
        items: [],
      },
      weakness: {
        title: "Weaknesses",
        items: [],
      },
    };

    // Add existing insights to categories
    insights.forEach((insightEl) => {
      const title = insightEl.querySelector("h3").textContent.trim();
      const description = insightEl.querySelector("p").textContent.trim();
      const type = Array.from(insightEl.querySelector("h3").classList)
        .find((cls) => cls.includes("text-"))
        .replace("text-green-600", "opportunity")
        .replace("text-[#D80032]", "threat")
        .replace("text-blue-600", "strength")
        .replace("text-yellow-600", "weakness");

      categories[type].items.push({ title, description });
    });

    // Generate HTML for each category
    for (const [type, category] of Object.entries(categories)) {
      if (category.items.length > 0) {
        reportHTML += `<div class="mb-4">
          <h3 class="font-medium mb-2">${category.title}</h3>
          <ul class="space-y-2">`;

        category.items.forEach((item) => {
          reportHTML += `<li>
            <div class="font-medium">${item.title}</div>
            <div class="text-sm text-gray-600">${item.description}</div>
          </li>`;
        });

        reportHTML += `</ul></div>`;
      }
    }

    // Add summary and recommendations
    reportHTML += `<div class="mt-6 pt-4 border-t border-gray-200">
      <h3 class="font-medium mb-2">Summary & Recommendations</h3>
      <p class="text-sm text-gray-600">
        Based on the current strategic insights, we recommend focusing on leveraging your AI capabilities strength 
        while addressing the social media weakness. The mid-market segment opportunity should be prioritized as it 
        aligns with your core strengths.
      </p>
    </div>`;

    return reportHTML;
  }

  // Function to show notification
  function showNotification(message) {
    const notification = document.getElementById("notification");
    notification.textContent = message;
    notification.classList.remove("hidden");
    notification.classList.remove("opacity-0");

    setTimeout(() => {
      notification.classList.add("opacity-0");
      setTimeout(() => {
        notification.classList.add("hidden");
      }, 500);
    }, 3000);
  }

  // Function to add event listener to dismiss button
  function addDismissListener(button) {
    button.addEventListener("click", function () {
      const insightId = this.getAttribute("data-insight-id");
      const insightElement = document.querySelector(
        `[data-insight-id="${insightId}"]`
      );

      // Fade out and remove
      insightElement.style.opacity = "0";
      setTimeout(() => {
        insightElement.remove();
      }, 300);
    });
  }

  // Initialize event listeners when DOM is ready
  document.addEventListener("DOMContentLoaded", function () {
    const generateReportBtn = document.getElementById("generate-report-btn");
    const insightsContainer = document.getElementById("insights-container");
    const reportContainer = document.getElementById("report-container");
    const reportContent = document.getElementById("report-content");
    const downloadReportBtn = document.getElementById("download-report");

    // Add event listeners to initial dismiss buttons
    document.querySelectorAll(".dismiss-insight").forEach((button) => {
      addDismissListener(button);
    });

    // Add event listener for generating report
    generateReportBtn.addEventListener("click", function () {
      // Show loading state
      generateReportBtn.innerHTML = `
        <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Generating...
      `;

      // Simulate loading delay
      setTimeout(() => {
        // Reset button state
        generateReportBtn.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          Generate Weekly Report
        `;

        // Add additional insights that haven't been added yet
        additionalInsights.forEach((insight) => {
          // Only add insights that haven't been added before
          if (
            !addedInsightIds.has(insight.id) &&
            !document.querySelector(`[data-insight-id="${insight.id}"]`)
          ) {
            addedInsightIds.add(insight.id);

            const insightHTML = generateInsightHTML(insight);
            const tempDiv = document.createElement("div");
            tempDiv.innerHTML = insightHTML;
            const insightElement = tempDiv.firstElementChild;

            insightsContainer.appendChild(insightElement);

            // Add event listener to the new dismiss button
            const dismissButton =
              insightElement.querySelector(".dismiss-insight");
            addDismissListener(dismissButton);

            // Highlight the new insight temporarily
            insightElement.classList.add("bg-yellow-50");
            setTimeout(() => {
              insightElement.classList.remove("bg-yellow-50");
            }, 2000);
          }
        });

        // Generate and show report
        reportContent.innerHTML = generateReportHTML();
        reportContainer.classList.remove("hidden");

        // Scroll to report
        reportContainer.scrollIntoView({ behavior: "smooth" });

        // Show success notification
        showNotification("Report generated successfully!");
      }, 1500);
    });

    // Add event listener for downloading report
    downloadReportBtn.addEventListener("click", function () {
      // Simulate download process
      downloadReportBtn.innerHTML = `
        <svg class="animate-spin h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Downloading...
      `;

      setTimeout(() => {
        // Reset button state
        downloadReportBtn.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
          Download PDF
        `;

        // Show success notification
        showNotification("Report downloaded successfully!");
      }, 1500);
    });
  });
</script>

<style>
  /* Fade animations */
  .dismiss-insight {
    transition: color 0.2s ease;
  }

  [data-insight-id] {
    transition:
      opacity 0.3s ease,
      background-color 0.5s ease;
  }

  #notification {
    transition: opacity 0.5s ease;
  }

  /* Report container transitions */
  #report-container {
    transition: all 0.3s ease;
  }
</style>
