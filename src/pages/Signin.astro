---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Authentication">
  <div
    class="min-h-screen flex items-center justify-center bg-[#F9DEC9] py-12 px-4 sm:px-6 lg:px-8"
  >
    <div class="max-w-md w-full space-y-8 relative mt-8">
      <div class="card-container" id="card-container">
        <!-- Sign In Form -->
        <div class="auth-card" id="signin-card">
          <div class="auth-header">
            <h2 class="text-3xl font-extrabold text-[#3D0C11]">Welcome Back</h2>
            <p class="mt-2 text-sm text-[#3D0C11]/80">
              Sign in to your account to continue
            </p>
          </div>

          <!-- Demo Credentials Notice -->
          <div
            class="mb-6 p-3 bg-[#F9DEC9]/50 border border-[#D80032]/30 rounded-lg text-center"
          >
            <p class="text-sm font-medium text-[#3D0C11]">Demo Credentials:</p>
            <p class="text-sm text-[#3D0C11]/80">
              Email: <span class="font-medium text-[#D80032]"
                >todaymarketingadmin@gmail.com</span
              >
            </p>
            <p class="text-sm text-[#3D0C11]/80">
              Password: <span class="font-medium text-[#D80032]">12345678</span>
            </p>
          </div>

          <form class="space-y-6" id="signin-form">
            <div class="space-y-4">
              <div class="input-group">
                <label
                  for="signin-email"
                  class="text-sm font-medium text-[#3D0C11]"
                  >Email address</label
                >
                <input
                  id="signin-email"
                  name="email"
                  type="email"
                  autocomplete="email"
                  required
                  class="auth-input"
                  placeholder="your@email.com"
                />
              </div>
              <div class="input-group">
                <label
                  for="signin-password"
                  class="text-sm font-medium text-[#3D0C11]">Password</label
                >
                <div class="relative">
                  <input
                    id="signin-password"
                    name="password"
                    type="password"
                    autocomplete="current-password"
                    required
                    class="auth-input pr-10"
                    placeholder="••••••••"
                  />
                  <button
                    type="button"
                    id="toggle-password-signin"
                    class="absolute inset-y-0 right-0 pr-3 flex items-center text-[#D80032]"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      id="eye-icon-signin"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                      ></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  class="h-4 w-4 text-[#D80032] focus:ring-[#D80032] border-gray-300 rounded"
                />
                <label
                  for="remember-me"
                  class="ml-2 block text-sm text-[#3D0C11]"
                >
                  Remember me
                </label>
              </div>

              <div class="text-sm">
                <a
                  href="#"
                  class="font-medium text-[#D80032] hover:text-[#F78CA2] transition-colors"
                >
                  Forgot password?
                </a>
              </div>
            </div>

            <div>
              <button type="submit" class="auth-button">
                <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                  <svg
                    class="h-5 w-5 text-[#F78CA2]"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 116 0z"
                      clip-rule="evenodd"></path>
                  </svg>
                </span>
                Sign in
                <span class="loading-spinner" id="signin-spinner"></span>
              </button>
            </div>
          </form>

          <div class="mt-4 text-center">
            <p class="text-sm text-[#3D0C11]/80">
              Don't have an account?
              <button
                type="button"
                id="switch-to-signup"
                class="font-medium text-[#D80032] hover:text-[#F78CA2] transition-colors"
              >
                Create one now
              </button>
            </p>
          </div>
        </div>

        <!-- Sign Up Form -->
        <div class="auth-card hidden" id="signup-card">
          <div class="auth-header">
            <h2 class="text-3xl font-extrabold text-[#3D0C11]">Join Us</h2>
            <p class="mt-2 text-sm text-[#3D0C11]/80">
              Create a new account to get started
            </p>
          </div>

          <!-- Demo Credentials Notice -->
          <div
            class="mb-6 p-3 bg-[#F9DEC9]/50 border border-[#D80032]/30 rounded-lg text-center"
          >
            <p class="text-sm font-medium text-[#3D0C11]">
              After creating an account, you can use these demo admin
              credentials:
            </p>
            <p class="text-sm text-[#3D0C11]/80">
              Email: <span class="font-medium text-[#D80032]"
                >todaymarketingadmin@gmail.com</span
              >
            </p>
            <p class="text-sm text-[#3D0C11]/80">
              Password: <span class="font-medium text-[#D80032]">12345678</span>
            </p>
          </div>

          <form class="space-y-6" id="signup-form">
            <div class="space-y-4">
              <div class="input-group">
                <label
                  for="signup-name"
                  class="text-sm font-medium text-[#3D0C11]">Full name</label
                >
                <input
                  id="signup-name"
                  name="name"
                  type="text"
                  autocomplete="name"
                  required
                  class="auth-input"
                  placeholder="John Doe"
                />
              </div>
              <div class="input-group">
                <label
                  for="signup-email"
                  class="text-sm font-medium text-[#3D0C11]"
                  >Email address</label
                >
                <input
                  id="signup-email"
                  name="email"
                  type="email"
                  autocomplete="email"
                  required
                  class="auth-input"
                  placeholder="your@email.com"
                />
              </div>
              <div class="input-group">
                <label
                  for="signup-password"
                  class="text-sm font-medium text-[#3D0C11]">Password</label
                >
                <div class="relative">
                  <input
                    id="signup-password"
                    name="password"
                    type="password"
                    autocomplete="new-password"
                    required
                    class="auth-input pr-10"
                    placeholder="••••••••"
                  />
                  <button
                    type="button"
                    id="toggle-password-signup"
                    class="absolute inset-y-0 right-0 pr-3 flex items-center text-[#D80032]"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      id="eye-icon-signup"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                      ></path>
                    </svg>
                  </button>
                </div>
              </div>
              <div class="input-group">
                <label
                  for="signup-confirm-password"
                  class="text-sm font-medium text-[#3D0C11]"
                  >Confirm password</label
                >
                <div class="relative">
                  <input
                    id="signup-confirm-password"
                    name="confirm-password"
                    type="password"
                    autocomplete="new-password"
                    required
                    class="auth-input pr-10"
                    placeholder="••••••••"
                  />
                  <div
                    id="password-match-indicator"
                    class="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 rounded-full"
                  >
                  </div>
                </div>
              </div>
            </div>

            <div>
              <button type="submit" class="auth-button">
                <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                  <svg
                    class="h-5 w-5 text-[#F78CA2]"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                      clip-rule="evenodd"></path>
                  </svg>
                </span>
                Sign up
                <span class="loading-spinner" id="signup-spinner"></span>
              </button>
            </div>
          </form>

          <div class="mt-4 text-center">
            <p class="text-sm text-[#3D0C11]/80">
              Already have an account?
              <button
                type="button"
                id="switch-to-signin"
                class="font-medium text-[#D80032] hover:text-[#F78CA2] transition-colors"
              >
                Sign in
              </button>
            </p>
          </div>
        </div>
      </div>

      <!-- Social Login -->
      <div class="mt-8">
        <div class="relative">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-[#3D0C11]/20"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-[#F9DEC9] text-[#3D0C11]/60">
              Or continue with
            </span>
          </div>
        </div>

        <div class="mt-6 grid grid-cols-2 gap-3">
          <button type="button" class="social-button">
            <svg
              class="w-5 h-5"
              viewBox="0 0 24 24"
              fill="currentColor"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M12.24 10.285V14.4h6.806c-.275 1.765-2.056 5.174-6.806 5.174-4.095 0-7.439-3.389-7.439-7.574s3.345-7.574 7.439-7.574c2.33 0 3.891.989 4.785 1.849l3.254-3.138C18.189 1.186 15.479 0 12.24 0c-6.635 0-12 5.365-12 12s5.365 12 12 12c6.926 0 11.52-4.869 11.52-11.726 0-.788-.085-1.39-.189-1.989H12.24z"
              ></path>
            </svg>
            <span>Google</span>
          </button>

          <button type="button" class="social-button">
            <svg
              class="w-5 h-5"
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M20 10c0-5.523-4.477-10-10-10S0 4.477 0 10c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V10h2.54V7.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V10h2.773l-.443 2.89h-2.33v6.988C16.343 19.128 20 14.991 20 10z"
                clip-rule="evenodd"></path>
            </svg>
            <span>Facebook</span>
          </button>
        </div>
      </div>

      <!-- Success Message -->
      <div
        id="success-message"
        class="hidden fixed inset-0 flex items-center justify-center z-50"
      >
        <div class="absolute inset-0 bg-black opacity-50"></div>
        <div
          class="relative bg-white rounded-lg shadow-xl p-6 max-w-sm w-full mx-4 transform transition-all"
        >
          <div class="flex items-center justify-center text-[#D80032] mb-4">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-16 w-16"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3
            class="text-xl font-bold text-[#3D0C11] text-center"
            id="success-title"
          >
            Success!
          </h3>
          <p class="text-center text-[#3D0C11]/80 mt-2" id="success-text">
            Your action was completed successfully.
          </p>
          <button
            id="success-close"
            class="mt-6 w-full py-2 px-4 bg-[#D80032] text-white rounded-md hover:bg-[#F78CA2] transition-colors"
          >
            Continue
          </button>
        </div>
      </div>

      <!-- Error Message -->
      <div
        id="error-message"
        class="hidden fixed inset-0 flex items-center justify-center z-50"
      >
        <div class="absolute inset-0 bg-black opacity-50"></div>
        <div
          class="relative bg-white rounded-lg shadow-xl p-6 max-w-sm w-full mx-4 transform transition-all"
        >
          <div class="flex items-center justify-center text-[#D80032] mb-4">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-16 w-16"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
              ></path>
            </svg>
          </div>
          <h3 class="text-xl font-bold text-[#3D0C11] text-center">Oops!</h3>
          <p class="text-center text-[#3D0C11]/80 mt-2" id="error-text">
            Something went wrong. Please try again.
          </p>
          <button
            id="error-close"
            class="mt-6 w-full py-2 px-4 bg-[#D80032] text-white rounded-md hover:bg-[#F78CA2] transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    </div>
    <!-- Full Page Loading Animation (AI-Inspired) -->
    <div
      id="page-loading"
      class="fixed inset-0 flex flex-col items-center justify-center bg-[#F9DEC9] z-50 hidden"
    >
      <!-- AI-inspired loader animation -->
      <div class="ai-loader mb-6">
        <div class="ai-nodes-container">
          <div class="ai-node node-1"></div>
          <div class="ai-node node-2"></div>
          <div class="ai-node node-3"></div>
          <div class="ai-node node-4"></div>
          <div class="ai-node node-5"></div>
          <div class="ai-node node-6"></div>
          <div class="ai-node node-7"></div>
        </div>
        <div class="ai-brain-center"></div>
      </div>
      <div class="text-xl font-medium text-[#3D0C11]">
        Connecting to dashboard
      </div>
      <div class="loading-text text-sm text-[#3D0C11]/70 mt-2">
        <span class="dot-1">.</span>
        <span class="dot-2">.</span>
        <span class="dot-3">.</span>
      </div>
    </div>
  </div>
</Layout>

<style>
  .auth-card {
    @apply bg-white p-8 rounded-2xl shadow-xl;
    animation: fadeIn 0.4s ease-out;
    box-shadow:
      0 10px 25px -5px rgba(61, 12, 17, 0.1),
      0 10px 10px -5px rgba(61, 12, 17, 0.04);
    border: 1px solid rgba(249, 222, 201, 0.5);
  }

  .auth-header {
    @apply text-center mb-8;
  }

  .auth-input {
    @apply block w-full px-4 py-3 border border-[#F9DEC9] rounded-xl text-[#3D0C11] placeholder-[#3D0C11]/40 bg-[#F9DEC9]/30;
    @apply focus:ring-2 focus:ring-[#F78CA2] focus:border-[#F78CA2] focus:outline-none transition-colors;
  }

  .input-group {
    @apply space-y-1;
  }

  .auth-button {
    @apply relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-xl;
    @apply text-white bg-[#D80032] hover:bg-[#F78CA2] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#F78CA2];
    @apply transition-all duration-200 ease-in-out;
  }

  .auth-button:active {
    transform: scale(0.98);
  }

  .social-button {
    @apply relative w-full inline-flex justify-center items-center gap-2 py-2.5 px-4 border border-[#3D0C11]/10;
    @apply rounded-xl shadow-sm bg-white text-sm font-medium text-[#3D0C11]/80 hover:bg-[#F9DEC9]/50;
    @apply transition-colors duration-200;
  }

  .loading-spinner {
    @apply hidden h-4 w-4 ml-2 animate-spin rounded-full border-2 border-t-transparent border-white;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideIn {
    from {
      transform: translateX(20px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(-20px);
      opacity: 0;
    }
  }

  .slide-in {
    animation: slideIn 0.3s forwards;
  }

  .slide-out {
    animation: slideOut 0.3s forwards;
  }

  /* AI Loading Animation Styles */
  @keyframes fadeInLoading {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  #page-loading {
    animation: fadeInLoading 0.3s ease-out;
  }

  /* AI Brain Network Animation */
  .ai-loader {
    position: relative;
    width: 120px;
    height: 120px;
  }

  .ai-brain-center {
    position: absolute;
    width: 40px;
    height: 40px;
    background-color: rgba(216, 0, 50, 0.9);
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    box-shadow: 0 0 15px rgba(216, 0, 50, 0.5);
    z-index: 5;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
    50% {
      transform: translate(-50%, -50%) scale(1.1);
      opacity: 0.8;
    }
    100% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
  }

  .ai-nodes-container {
    position: absolute;
    width: 100%;
    height: 100%;
    animation: rotate 12s linear infinite;
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .ai-node {
    position: absolute;
    width: 16px;
    height: 16px;
    background-color: #d80032;
    border-radius: 50%;
    animation: nodeFloat 3s infinite;
  }

  @keyframes nodeFloat {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.2);
    }
    100% {
      transform: scale(1);
    }
  }

  .ai-node::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 60px;
    height: 1px;
    background: linear-gradient(
      90deg,
      rgba(216, 0, 50, 0.8),
      rgba(216, 0, 50, 0)
    );
    transform-origin: left center;
  }

  .node-1 {
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    animation-delay: 0s;
  }
  .node-2 {
    top: 15%;
    right: 15%;
    animation-delay: -0.4s;
  }
  .node-3 {
    bottom: 15%;
    right: 15%;
    animation-delay: -0.8s;
  }
  .node-4 {
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    animation-delay: -1.2s;
  }
  .node-5 {
    bottom: 15%;
    left: 15%;
    animation-delay: -1.6s;
  }
  .node-6 {
    top: 15%;
    left: 15%;
    animation-delay: -2s;
  }
  .node-7 {
    top: 50%;
    right: 0;
    transform: translateY(-50%);
    animation-delay: -2.4s;
  }

  /* Animated loading dots */
  .loading-text {
    display: inline-block;
  }

  .loading-text span {
    display: inline-block;
    font-size: 24px;
    opacity: 0;
    animation: loadingDots 1.4s infinite;
  }

  .dot-1 {
    animation-delay: 0s;
  }
  .dot-2 {
    animation-delay: 0.2s;
  }
  .dot-3 {
    animation-delay: 0.4s;
  }

  @keyframes loadingDots {
    0% {
      opacity: 0;
      transform: translateY(0);
    }
    25% {
      opacity: 1;
      transform: translateY(-5px);
    }
    50% {
      opacity: 0;
      transform: translateY(0);
    }
    100% {
      opacity: 0;
      transform: translateY(0);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Admin credentials
    const ADMIN_EMAIL = "todaymarketingadmin@gmail.com";
    const ADMIN_PASSWORD = "12345678";

    // Dashboard URL
    const DASHBOARD_URL = "/dashboard"; // Update this to your actual dashboard URL

    // Elements
    const signinCard = document.getElementById("signin-card");
    const signupCard = document.getElementById("signup-card");
    const switchToSignup = document.getElementById("switch-to-signup");
    const switchToSignin = document.getElementById("switch-to-signin");
    const signinForm = document.getElementById("signin-form");
    const signupForm = document.getElementById("signup-form");
    const signinSpinner = document.getElementById("signin-spinner");
    const signupSpinner = document.getElementById("signup-spinner");
    const successMessage = document.getElementById("success-message");
    const successTitle = document.getElementById("success-title");
    const successText = document.getElementById("success-text");
    const successClose = document.getElementById("success-close");
    const errorMessage = document.getElementById("error-message");
    const errorText = document.getElementById("error-text");
    const errorClose = document.getElementById("error-close");
    const togglePasswordSignin = document.getElementById(
      "toggle-password-signin"
    );
    const togglePasswordSignup = document.getElementById(
      "toggle-password-signup"
    );
    const signinPassword = document.getElementById("signin-password");
    const signupPassword = document.getElementById("signup-password");
    const confirmPassword = document.getElementById("signup-confirm-password");
    const passwordMatchIndicator = document.getElementById(
      "password-match-indicator"
    );
    const eyeIconSignin = document.getElementById("eye-icon-signin");
    const eyeIconSignup = document.getElementById("eye-icon-signup");

    // Toggle password visibility
    togglePasswordSignin?.addEventListener("click", () => {
      const type =
        signinPassword.getAttribute("type") === "password"
          ? "text"
          : "password";
      signinPassword.setAttribute("type", type);

      // Toggle eye icon
      if (type === "text") {
        eyeIconSignin.innerHTML = `
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
      `;
      } else {
        eyeIconSignin.innerHTML = `
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
      `;
      }
    });

    togglePasswordSignup?.addEventListener("click", () => {
      const type =
        signupPassword.getAttribute("type") === "password"
          ? "text"
          : "password";
      signupPassword.setAttribute("type", type);

      // Toggle eye icon
      if (type === "text") {
        eyeIconSignup.innerHTML = `
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
      `;
      } else {
        eyeIconSignup.innerHTML = `
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
      `;
      }
    });

    // Check password match
    if (signupPassword && confirmPassword) {
      const checkPasswordMatch = () => {
        if (confirmPassword.value === "") {
          passwordMatchIndicator.style.backgroundColor = "";
          return;
        }

        if (signupPassword.value === confirmPassword.value) {
          passwordMatchIndicator.style.backgroundColor = "#4CAF50"; // Green for match
        } else {
          passwordMatchIndicator.style.backgroundColor = "#D80032"; // Red for no match
        }
      };

      signupPassword.addEventListener("input", checkPasswordMatch);
      confirmPassword.addEventListener("input", checkPasswordMatch);
    }

    // Toggle between sign in and sign up forms with animation
    const switchToSignupForm = () => {
      // Reset any previous animation classes
      signinCard.classList.remove("slide-in");
      signupCard.classList.remove("slide-in", "slide-out");

      // Add animation class
      signinCard.classList.add("slide-out");

      // After animation completes, switch forms
      setTimeout(() => {
        signinCard.classList.add("hidden");
        signinCard.classList.remove("slide-out");

        signupCard.classList.remove("hidden");
        signupCard.classList.add("slide-in");
      }, 280);
    };

    const switchToSigninForm = () => {
      // Reset any previous animation classes
      signupCard.classList.remove("slide-in");
      signinCard.classList.remove("slide-in", "slide-out");

      // Add animation class
      signupCard.classList.add("slide-out");

      // After animation completes, switch forms
      setTimeout(() => {
        signupCard.classList.add("hidden");
        signupCard.classList.remove("slide-out");

        signinCard.classList.remove("hidden");
        signinCard.classList.add("slide-in");
      }, 280);
    };

    // Add event listeners for switching forms
    switchToSignup?.addEventListener("click", switchToSignupForm);
    switchToSignin?.addEventListener("click", switchToSigninForm);

    // Form submission handlers with loading state
    signinForm?.addEventListener("submit", (e) => {
      e.preventDefault();

      // Show loading spinner
      signinSpinner.classList.remove("hidden");

      // Get input values
      const email = document.getElementById("signin-email").value;
      const password = document.getElementById("signin-password").value;

      // Simulate API call with timeout
      setTimeout(() => {
        // Hide spinner
        signinSpinner.classList.add("hidden");

        // Check if credentials match admin credentials
        if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {
          console.log("Admin login successful, redirecting to dashboard...");

          // Store authentication state in local storage
          localStorage.setItem("isAuthenticated", "true");
          localStorage.setItem("userRole", "admin");
          localStorage.setItem("userEmail", email);

          // Show full page AI loading animation before redirect
          const pageLoading = document.getElementById("page-loading");
          pageLoading.classList.remove("hidden");

          // Add some simulated AI processing feel with a slightly longer delay
          setTimeout(() => {
            // Redirect to dashboard
            window.location.href = DASHBOARD_URL;
          }, 2200); // 2.2 seconds delay for more dramatic AI animation effect
        } else {
          // Show error message for invalid credentials
          errorText.textContent =
            "Invalid email or password. Please try again.";
          errorMessage.classList.remove("hidden");
        }
      }, 1000);
    });

    signupForm?.addEventListener("submit", (e) => {
      e.preventDefault();

      // Form validation
      const password = document.getElementById("signup-password").value;
      const confirmPassword = document.getElementById(
        "signup-confirm-password"
      ).value;

      if (password !== confirmPassword) {
        errorText.textContent = "Passwords do not match. Please try again.";
        errorMessage.classList.remove("hidden");
        return;
      }

      // Show loading spinner
      signupSpinner.classList.remove("hidden");

      // Simulate API call with timeout
      setTimeout(() => {
        const name = document.getElementById("signup-name").value;

        // Hide spinner
        signupSpinner.classList.add("hidden");

        // 80% chance of success,

        // 80% chance of success, 20% chance of error for demo purposes
        if (Math.random() > 0.2) {
          // Show success message
          successTitle.textContent = "Account Created!";
          successText.textContent = `Welcome to our platform, ${name}! Your account has been successfully created.`;
          successMessage.classList.remove("hidden");

          // Auto-redirect to sign in after account creation (optional)
          setTimeout(() => {
            successMessage.classList.add("hidden");
            switchToSigninForm();
          }, 3000);
        } else {
          // Show error message
          errorText.textContent =
            "There was an issue creating your account. This email might already be registered.";
          errorMessage.classList.remove("hidden");
        }
      }, 2000);
    });

    // Close modal buttons
    successClose?.addEventListener("click", () => {
      successMessage.classList.add("hidden");

      // If this was from a signup success, switch back to signin
      if (successTitle.textContent.includes("Account Created")) {
        switchToSigninForm();
      }
    });

    errorClose?.addEventListener("click", () => {
      errorMessage.classList.add("hidden");
    });

    // Input animations
    const inputs = document.querySelectorAll(".auth-input");
    inputs.forEach((input) => {
      input.addEventListener("focus", () => {
        input.parentElement.classList.add("scale-105");
        input.classList.add("shadow-sm");
      });

      input.addEventListener("blur", () => {
        input.parentElement.classList.remove("scale-105");
        input.classList.remove("shadow-sm");
      });
    });
  });
</script>
